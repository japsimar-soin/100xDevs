//todo server using file

/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const PORT = 3000;

const app = express();

app.use(bodyParser.json());

//todos.json file contains all the entries for stored objects. While reading from file, we simply res.json([data form file])
app.get("/todos", (req, res) => {
	fs.readFile("todos.json", "utf8", (err, data) => {
		if (err) throw err;
		res.json(JSON.parse(data)); //data is what is read from the file --> parse it to JS notation
	});
});

function findIndex(arr, id) {
	for (let i = 0; i < arr.length; i++) {
		if (arr[i].id === id) {
			return i;
		}
	}
    return -1;
}

app.get("/todos/:id", (req, res) => {
	fs.readFile("todos.json", "utf8", (err, data) => {
		let arr = JSON.parse(data); //JSON format mein sabki list aagyi
		let idx = findIndex(arr, parseInt(req.params.id));
		if (idx == -1) {
			return res.status(404).send();
		} else {
			res.status(200).json(arr[idx]);
		}
	});
});

app.post("/todos", (req, res) => {
    const newTodos = req.body;
	fs.readFile("todos.json", "utf8", (err, data) => {
		if (err) throw err;
		let arr = JSON.parse(data);
        newTodos.forEach(element => {
            const newTodo = {
                id: Math.floor(Math.random() * 1000000),
                title: element.title,
                description: element.description,
            };      
            arr.push(newTodo);
        });
		//write the new array back to the file
		fs.writeFile("todos.json", JSON.stringify(arr), (err) => {
			if (err) throw err;
			res.status(200).json(newTodos);
		});
	});
});

app.put("/todos/:id", (req, res) => {
	//agar "id" exist hi nhi krti, then directly 404, else create updated todo and add to file
	fs.readFile("todos.json", "utf8", (err, data) => {
		let arr = JSON.parse(data);
		const idx = findIndex(arr, parseInt(req.params.id));
		if (idx == -1) {
			res.status(404).send();
		}
		const updatedTodo = {
			id: arr[idx].id,
			title: req.body.title,
			description: req.body.description,
		};
		arr[idx] = updatedTodo;
		fs.writeFile("todos.json", JSON.stringify(arr), (err) => {
			if (err) throw err;
			res.status(200).send(updatedTodo);
		});
	});
});

function removeAtIndex(arr, id) {
	let newArr = [];
	for (let i = 0; i < arr.length; i++) {
		if (i != id) {
			newArr.push(arr[i]);
		}
	}
	return newArr;
}

app.delete("/todos/:id", (req, res) => {
	fs.readFile("todos.json", "utf8", (err, data) => {
		if (err) throw err;
		let arr = JSON.parse(data);
		const idx = findIndex(arr, parseInt(req.params.id));
		if (idx == -1) {
			res.status(400).send("Invalid id");
		} else {
			arr = removeAtIndex(arr, idx);
			fs.writeFile("todos.json", JSON.stringify(arr), (err) => {
				if (err) throw err;
				res.status(200).json();
			});
		}
	});
});

app.use((req, res, next) => {
	res.status(404).send();
});

app.listen(PORT, () => {
	console.log("listening at port 3000");
});

module.exports = app;
